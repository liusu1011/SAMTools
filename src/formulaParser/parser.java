
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 07 13:40:11 EST 2013
//----------------------------------------------------

package formulaParser;

import formulaParser.ErrorMsg;
import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import formulaParser.formulaAbsyntree.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 07 13:40:11 EST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\004" +
    "\000\002\004\003\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\006\012\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\004\000\002\011\004\000\002\012\002" +
    "\000\002\012\004\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\004\000\002" +
    "\016\005\000\002\016\005\000\002\016\005\000\002\016" +
    "\007\000\002\017\003\000\002\017\006\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\022\003\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\025" +
    "\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\034\006\012\020\031\025\005\026\033\027" +
    "\010\037\016\040\017\044\014\045\030\046\035\047\023" +
    "\050\020\051\034\001\002\000\014\002\000\004\112\005" +
    "\113\007\110\010\107\001\002\000\004\050\uffd4\001\002" +
    "\000\016\002\ufffe\004\ufffe\005\ufffe\007\ufffe\010\ufffe\036" +
    "\ufffe\001\002\000\062\002\ufff5\004\ufff5\005\ufff5\007\ufff5" +
    "\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\022\ufff5\023\ufff5\024\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\036\ufff5\041\ufff5\043" +
    "\ufff5\001\002\000\004\050\uffd2\001\002\000\062\002\uffed" +
    "\004\uffed\005\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed" +
    "\023\uffed\024\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\036\uffed\041\uffed\043\uffed\001\002\000\034\006\012" +
    "\020\031\025\005\026\033\027\010\037\016\040\017\044" +
    "\014\045\030\046\035\047\023\050\020\051\034\001\002" +
    "\000\016\002\ufffd\004\ufffd\005\ufffd\007\ufffd\010\ufffd\036" +
    "\ufffd\001\002\000\062\002\uffcf\004\uffcf\005\uffcf\007\uffcf" +
    "\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\036\uffcf\041\uffcf\043" +
    "\uffcf\001\002\000\062\002\ufff2\004\ufff2\005\ufff2\007\ufff2" +
    "\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\017\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\034\ufff2\036\ufff2\041\ufff2\043" +
    "\ufff2\001\002\000\024\020\031\037\016\040\017\044\014" +
    "\045\030\046\035\047\023\050\020\051\034\001\002\000" +
    "\026\020\031\035\125\037\016\040\017\044\014\045\030" +
    "\046\035\047\023\050\020\051\034\001\002\000\066\002" +
    "\uffd7\004\uffd7\005\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\121\036\uffd7\041\uffd7\042\uffd7\043\uffd7\001" +
    "\002\000\004\002\120\001\002\000\062\002\ufff3\004\ufff3" +
    "\005\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014" +
    "\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3\023\ufff3" +
    "\024\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\036" +
    "\ufff3\041\ufff3\043\ufff3\001\002\000\062\002\uffcd\004\uffcd" +
    "\005\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\022\uffcd\023\uffcd" +
    "\024\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036" +
    "\uffcd\041\uffcd\043\uffcd\001\002\000\062\002\uffeb\004\uffeb" +
    "\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014" +
    "\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\036" +
    "\uffeb\041\uffeb\043\uffeb\001\002\000\062\002\uffec\004\uffec" +
    "\005\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022\uffec\023\uffec" +
    "\024\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\036" +
    "\uffec\041\uffec\043\uffec\001\002\000\004\050\076\001\002" +
    "\000\054\002\ufffb\004\ufffb\005\ufffb\007\ufffb\010\ufffb\011" +
    "\046\012\045\013\050\014\054\015\055\016\056\017\047" +
    "\020\040\022\053\023\044\024\051\030\042\031\041\032" +
    "\043\033\052\036\ufffb\001\002\000\062\002\uffce\004\uffce" +
    "\005\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\022\uffce\023\uffce" +
    "\024\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\036" +
    "\uffce\041\uffce\043\uffce\001\002\000\024\020\031\037\016" +
    "\040\017\044\014\045\030\046\035\047\023\050\020\051" +
    "\034\001\002\000\062\002\ufff4\004\ufff4\005\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\022\ufff4\023\ufff4\024\ufff4\030\ufff4" +
    "\031\ufff4\032\ufff4\033\ufff4\034\ufff4\036\ufff4\041\ufff4\043" +
    "\ufff4\001\002\000\004\050\uffd3\001\002\000\062\002\uffcc" +
    "\004\uffcc\005\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\022\uffcc" +
    "\023\uffcc\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\036\uffcc\041\uffcc\043\uffcc\001\002\000\062\002\uffcb" +
    "\004\uffcb\005\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013" +
    "\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb" +
    "\023\uffcb\024\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034" +
    "\uffcb\036\uffcb\041\uffcb\043\uffcb\001\002\000\016\002\uffff" +
    "\004\uffff\005\uffff\007\uffff\010\uffff\036\uffff\001\002\000" +
    "\062\002\uffdc\004\uffdc\005\uffdc\007\uffdc\010\uffdc\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\036\uffdc\041\uffdc\043\uffdc\001\002\000" +
    "\024\020\031\037\016\040\017\044\014\045\030\046\035" +
    "\047\023\050\020\051\034\001\002\000\024\020\031\037" +
    "\016\040\017\044\014\045\030\046\035\047\023\050\020" +
    "\051\034\001\002\000\024\020\031\037\016\040\017\044" +
    "\014\045\030\046\035\047\023\050\020\051\034\001\002" +
    "\000\024\020\031\037\016\040\017\044\014\045\030\046" +
    "\035\047\023\050\020\051\034\001\002\000\024\020\031" +
    "\037\016\040\017\044\014\045\030\046\035\047\023\050" +
    "\020\051\034\001\002\000\024\020\031\037\016\040\017" +
    "\044\014\045\030\046\035\047\023\050\020\051\034\001" +
    "\002\000\024\020\031\037\016\040\017\044\014\045\030" +
    "\046\035\047\023\050\020\051\034\001\002\000\024\020" +
    "\031\037\016\040\017\044\014\045\030\046\035\047\023" +
    "\050\020\051\034\001\002\000\024\020\031\037\016\040" +
    "\017\044\014\045\030\046\035\047\023\050\020\051\034" +
    "\001\002\000\024\020\031\037\016\040\017\044\014\045" +
    "\030\046\035\047\023\050\020\051\034\001\002\000\024" +
    "\020\031\037\016\040\017\044\014\045\030\046\035\047" +
    "\023\050\020\051\034\001\002\000\024\020\031\037\016" +
    "\040\017\044\014\045\030\046\035\047\023\050\020\051" +
    "\034\001\002\000\024\020\031\037\016\040\017\044\014" +
    "\045\030\046\035\047\023\050\020\051\034\001\002\000" +
    "\024\020\031\037\016\040\017\044\014\045\030\046\035" +
    "\047\023\050\020\051\034\001\002\000\024\020\031\037" +
    "\016\040\017\044\014\045\030\046\035\047\023\050\020" +
    "\051\034\001\002\000\062\002\uffe4\004\uffe4\005\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4" +
    "\016\uffe4\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe4\036\uffe4\041\uffe4" +
    "\043\uffe4\001\002\000\062\002\uffe5\004\uffe5\005\uffe5\007" +
    "\uffe5\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe5\036\uffe5\041\uffe5" +
    "\043\uffe5\001\002\000\062\002\uffe6\004\uffe6\005\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe6\036\uffe6\041\uffe6" +
    "\043\uffe6\001\002\000\062\002\uffdf\004\uffdf\005\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\022\uffdf\023\uffdf\024\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\036\uffdf\041\uffdf" +
    "\043\uffdf\001\002\000\062\002\uffda\004\uffda\005\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda" +
    "\016\uffda\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\uffda\033\uffda\034\uffda\036\uffda\041\uffda" +
    "\043\uffda\001\002\000\062\002\uffde\004\uffde\005\uffde\007" +
    "\uffde\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde" +
    "\016\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024\uffde\030" +
    "\uffde\031\uffde\032\uffde\033\uffde\034\uffde\036\uffde\041\uffde" +
    "\043\uffde\001\002\000\062\002\uffe7\004\uffe7\005\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe7\036\uffe7\041\uffe7" +
    "\043\uffe7\001\002\000\062\002\uffe0\004\uffe0\005\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\022\053\023\uffe0\024\051\030" +
    "\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\036\uffe0\041\uffe0" +
    "\043\uffe0\001\002\000\062\002\uffe9\004\uffe9\005\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\050\014\054\015\055" +
    "\016\056\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe9\036\uffe9\041\uffe9" +
    "\043\uffe9\001\002\000\062\002\uffe8\004\uffe8\005\uffe8\007" +
    "\uffe8\010\uffe8\011\uffe8\012\uffe8\013\050\014\054\015\055" +
    "\016\056\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\043\033\052\034\uffe8\036\uffe8\041\uffe8" +
    "\043\uffe8\001\002\000\062\002\uffdd\004\uffdd\005\uffdd\007" +
    "\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\017\uffdd\020\uffdd\022\053\023\uffdd\024\051\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\041\uffdd" +
    "\043\uffdd\001\002\000\062\002\uffdb\004\uffdb\005\uffdb\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\041\032\uffdb\033\052\034\uffdb\036\uffdb\041\uffdb" +
    "\043\uffdb\001\002\000\062\002\uffe3\004\uffe3\005\uffe3\007" +
    "\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\016\uffe3\017\047\020\040\022\053\023\044\024\051\030" +
    "\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\036\uffe3\041\uffe3" +
    "\043\uffe3\001\002\000\062\002\uffe2\004\uffe2\005\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\047\020\040\022\053\023\044\024\051\030" +
    "\042\031\uffe2\032\uffe2\033\uffe2\034\uffe2\036\uffe2\041\uffe2" +
    "\043\uffe2\001\002\000\062\002\uffe1\004\uffe1\005\uffe1\007" +
    "\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\022\053\023\uffe1\024\051\030" +
    "\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\036\uffe1\041\uffe1" +
    "\043\uffe1\001\002\000\006\030\uffd5\031\uffd5\001\002\000" +
    "\006\030\100\031\102\001\002\000\004\050\uffd1\001\002" +
    "\000\004\050\020\001\002\000\004\050\uffd0\001\002\000" +
    "\004\042\104\001\002\000\004\037\105\001\002\000\034" +
    "\006\012\020\031\025\005\026\033\027\010\037\016\040" +
    "\017\044\014\045\030\046\035\047\023\050\020\051\034" +
    "\001\002\000\014\004\112\005\113\007\110\010\107\036" +
    "\111\001\002\000\034\006\012\020\031\025\005\026\033" +
    "\027\010\037\016\040\017\044\014\045\030\046\035\047" +
    "\023\050\020\051\034\001\002\000\034\006\012\020\031" +
    "\025\005\026\033\027\010\037\016\040\017\044\014\045" +
    "\030\046\035\047\023\050\020\051\034\001\002\000\016" +
    "\002\ufff6\004\ufff6\005\ufff6\007\ufff6\010\ufff6\036\ufff6\001" +
    "\002\000\034\006\012\020\031\025\005\026\033\027\010" +
    "\037\016\040\017\044\014\045\030\046\035\047\023\050" +
    "\020\051\034\001\002\000\034\006\012\020\031\025\005" +
    "\026\033\027\010\037\016\040\017\044\014\045\030\046" +
    "\035\047\023\050\020\051\034\001\002\000\016\002\ufff9" +
    "\004\ufff9\005\ufff9\007\110\010\107\036\ufff9\001\002\000" +
    "\016\002\ufffa\004\ufffa\005\113\007\110\010\107\036\ufffa" +
    "\001\002\000\016\002\ufff8\004\ufff8\005\ufff8\007\ufff8\010" +
    "\ufff8\036\ufff8\001\002\000\016\002\ufff7\004\ufff7\005\ufff7" +
    "\007\ufff7\010\ufff7\036\ufff7\001\002\000\004\002\001\001" +
    "\002\000\004\047\122\001\002\000\004\034\uffca\001\002" +
    "\000\004\034\124\001\002\000\064\002\uffd6\004\uffd6\005" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\022\uffd6\023\uffd6\024" +
    "\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\036\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\001\002\000\024\020\031\037" +
    "\016\040\017\044\014\045\030\046\035\047\023\050\020" +
    "\051\034\001\002\000\042\011\046\012\045\013\050\014" +
    "\054\015\055\016\056\017\047\020\040\022\053\023\044" +
    "\024\051\030\042\031\041\032\043\033\052\041\127\001" +
    "\002\000\062\002\uffd9\004\uffd9\005\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\022\uffd9\023\uffd9\024\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\036\uffd9\041\uffd9\043\uffd9\001" +
    "\002\000\004\034\136\001\002\000\044\011\046\012\045" +
    "\013\050\014\054\015\055\016\056\017\047\020\040\022" +
    "\053\023\044\024\051\030\042\031\041\032\043\033\052" +
    "\034\uffef\043\uffef\001\002\000\006\034\ufff1\043\133\001" +
    "\002\000\024\020\031\037\016\040\017\044\014\045\030" +
    "\046\035\047\023\050\020\051\034\001\002\000\006\034" +
    "\uffee\043\uffee\001\002\000\044\011\046\012\045\013\050" +
    "\014\054\015\055\016\056\017\047\020\040\022\053\023" +
    "\044\024\051\030\042\031\041\032\043\033\052\034\ufff0" +
    "\043\ufff0\001\002\000\004\041\137\001\002\000\062\002" +
    "\uffd8\004\uffd8\005\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\041\uffd8\043\uffd8\001\002\000\040\011" +
    "\046\012\045\013\050\014\054\015\055\016\056\017\047" +
    "\020\040\022\053\023\044\024\051\030\042\031\041\032" +
    "\043\033\052\001\002\000\042\011\ufff2\012\ufff2\013\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022\ufff2\023" +
    "\ufff2\024\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\036\142" +
    "\001\002\000\062\002\uffea\004\uffea\005\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\022\uffea\023\uffea\024\uffea\030\uffea\031" +
    "\uffea\032\uffea\033\uffea\034\uffea\036\uffea\041\uffea\043\uffea" +
    "\001\002\000\016\002\ufffc\004\ufffc\005\ufffc\007\110\010" +
    "\107\036\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\036\002\020\003\003\004\035\005\005\006" +
    "\012\007\026\013\014\014\024\015\010\016\023\017\031" +
    "\021\025\023\006\025\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\142\004\035\005" +
    "\005\006\012\007\026\013\014\014\024\015\010\016\023" +
    "\017\031\021\025\023\006\025\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\137" +
    "\013\140\014\024\015\010\016\023\017\031\023\006\025" +
    "\021\001\001\000\022\007\125\013\014\014\024\015\010" +
    "\016\023\017\031\023\006\025\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\007\036" +
    "\013\014\014\024\015\010\016\023\017\031\023\006\025" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\007\074\013\014\014\024\015\010\016\023" +
    "\017\031\023\006\025\021\001\001\000\022\007\073\013" +
    "\014\014\024\015\010\016\023\017\031\023\006\025\021" +
    "\001\001\000\022\007\072\013\014\014\024\015\010\016" +
    "\023\017\031\023\006\025\021\001\001\000\022\007\071" +
    "\013\014\014\024\015\010\016\023\017\031\023\006\025" +
    "\021\001\001\000\022\007\070\013\014\014\024\015\010" +
    "\016\023\017\031\023\006\025\021\001\001\000\022\007" +
    "\067\013\014\014\024\015\010\016\023\017\031\023\006" +
    "\025\021\001\001\000\022\007\066\013\014\014\024\015" +
    "\010\016\023\017\031\023\006\025\021\001\001\000\022" +
    "\007\065\013\014\014\024\015\010\016\023\017\031\023" +
    "\006\025\021\001\001\000\022\007\064\013\014\014\024" +
    "\015\010\016\023\017\031\023\006\025\021\001\001\000" +
    "\022\007\063\013\014\014\024\015\010\016\023\017\031" +
    "\023\006\025\021\001\001\000\022\007\062\013\014\014" +
    "\024\015\010\016\023\017\031\023\006\025\021\001\001" +
    "\000\022\007\061\013\014\014\024\015\010\016\023\017" +
    "\031\023\006\025\021\001\001\000\022\007\060\013\014" +
    "\014\024\015\010\016\023\017\031\023\006\025\021\001" +
    "\001\000\022\007\057\013\014\014\024\015\010\016\023" +
    "\017\031\023\006\025\021\001\001\000\022\007\056\013" +
    "\014\014\024\015\010\016\023\017\031\023\006\025\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\100\001\001\000\002\001\001\000\004" +
    "\017\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\105\004\035\005\005\006\012" +
    "\007\026\013\014\014\024\015\010\016\023\017\031\021" +
    "\025\023\006\025\021\001\001\000\002\001\001\000\034" +
    "\003\116\004\035\005\005\006\012\007\026\013\014\014" +
    "\024\015\010\016\023\017\031\021\025\023\006\025\021" +
    "\001\001\000\034\003\115\004\035\005\005\006\012\007" +
    "\026\013\014\014\024\015\010\016\023\017\031\021\025" +
    "\023\006\025\021\001\001\000\002\001\001\000\034\003" +
    "\114\004\035\005\005\006\012\007\026\013\014\014\024" +
    "\015\010\016\023\017\031\021\025\023\006\025\021\001" +
    "\001\000\034\003\113\004\035\005\005\006\012\007\026" +
    "\013\014\014\024\015\010\016\023\017\031\021\025\023" +
    "\006\025\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\007\130\010\127\013\014\014" +
    "\024\015\010\016\023\017\031\023\006\025\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\131\001\001\000\004\011\133\001\001\000\022" +
    "\007\134\013\014\014\024\015\010\016\023\017\031\023" +
    "\006\025\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	ErrorMsg errorMsg;
	public parser(java_cup.runtime.Scanner scan, ErrorMsg err) {
		this(scan);
		errorMsg = err;
	}
	public void syntax_error(java_cup.runtime.Symbol current) {
	    report_error("Syntax error (" + current.sym + ")", current);
	}

	public void report_error(String message, java_cup.runtime.Symbol info) {
		errorMsg.error(info.left, message);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // index ::= NUM 
            {
              Index RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = new Index(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("index",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // empty ::= EMPTY 
            {
              Empty RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Empty(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("empty",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // constant ::= STR 
            {
              Constant RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StrConstant(sleft, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // constant ::= NUM 
            {
              Constant RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumConstant(nleft, new Num(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // constant ::= FALSE 
            {
              Constant RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new False(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // constant ::= TRUE 
            {
              Constant RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new True(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constant",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // domain ::= NIN 
            {
              Domain RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nin(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // domain ::= IN 
            {
              Domain RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new In(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("domain",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // quantifier ::= NEXISTS 
            {
              Quantifier RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nexists(nleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // quantifier ::= EXISTS 
            {
              Quantifier RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Exists(eleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // quantifier ::= FORALL 
            {
              Quantifier RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForAll(fleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("quantifier",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // userVariable ::= ID 
            {
              UserVariable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("userVariable",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variable ::= ID LBRACK index RBRACK 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Index idx = (Index)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVariable(ileft, new Identifier(i), idx); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variable ::= ID 
            {
              Variable RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdVariable(ileft, i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // set_exp ::= LBRACE LBRACK terms RBRACK RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Terms ts = (Terms)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new BraceTerms(lleft, ts); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // set_exp ::= LBRACE term RBRACE 
            {
              SetExp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BraceTerm(lleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // set_exp ::= term DIFF term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Diff(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // set_exp ::= term UNION term 
            {
              SetExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Union(uleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("set_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arith_exp ::= MINUS term 
            {
              ArithExp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NegExp(mleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arith_exp ::= term MOD term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mod(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // arith_exp ::= term DIV term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(dleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // arith_exp ::= term MUL term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mul(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // arith_exp ::= term PLUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(pleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // arith_exp ::= term MINUS term 
            {
              ArithExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(mleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arith_exp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // rel_exp ::= term NIN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NinRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // rel_exp ::= term IN term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InRel(ileft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // rel_exp ::= term LEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeqRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // rel_exp ::= term GEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeqRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // rel_exp ::= term LT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtRel(lleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // rel_exp ::= term GT term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtRel(gleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // rel_exp ::= term NEQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeqRel(nleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // rel_exp ::= term EQ term 
            {
              RelExp RESULT =null;
		int t1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Term t1 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t2 = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqRel(eleft, t1, t2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("rel_exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= LPAREN exp RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= set_exp 
            {
              Exp RESULT =null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SetExp se = (SetExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SExp(seleft, se); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= rel_exp 
            {
              Exp RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		RelExp re = (RelExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RExp(releft, re); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= arith_exp 
            {
              Exp RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArithExp ae = (ArithExp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AExp(aeleft, ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // termRests ::= termRests termRest 
            {
              TermRestList RESULT =null;
		int trsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int trsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TermRestList trs = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRest tr = (TermRest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 trs.addElement(tr); RESULT = trs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // termRests ::= 
            {
              TermRestList RESULT =null;
		 RESULT = new TermRestList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRests",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // termRest ::= COMMA term 
            {
              TermRest RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TermRest(cleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("termRest",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // terms ::= term termRests 
            {
              Terms RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TermRestList tr = (TermRestList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Terms(tleft, t, tr); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("terms",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // term ::= exp 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // term ::= empty 
            {
              Term RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Empty e = (Empty)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EmptyTerm(eleft, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // term ::= variable 
            {
              Term RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableTerm(vleft, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // term ::= constant 
            {
              Term RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ConstantTerm(cleft, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // complexFormula ::= quantifier userVariable domain variable DOT LPAREN formula RPAREN 
            {
              ComplexFormula RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Quantifier q = (Quantifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		UserVariable u = (UserVariable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Domain d = (Domain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Variable v = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ComplexFormula(qleft, q, u, d, v, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("complexFormula",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compoundFormula ::= formula EQUIV formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EquivFormula(eleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // compoundFormula ::= formula IMP formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ImpFormula(ileft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // compoundFormula ::= formula OR formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrFormula(oleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // compoundFormula ::= formula AND formula 
            {
              CompoundFormula RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Formula f1 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f2 = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndFormula(aleft, f1, f2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundFormula",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // atomicFormula ::= term 
            {
              AtomicFormula RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Term t = (Term)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtomicTerm(tleft, t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // atomicFormula ::= NOT formula 
            {
              AtomicFormula RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotFormula(nleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("atomicFormula",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // formula ::= complexFormula 
            {
              Formula RESULT =null;
		int cpfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ComplexFormula cpf = (ComplexFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpxFormula(cpfleft, cpf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // formula ::= compoundFormula 
            {
              Formula RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundFormula cf = (CompoundFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CpFormula(cfleft, cf); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // formula ::= atomicFormula 
            {
              Formula RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AtomicFormula af = (AtomicFormula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AtFormula(afleft, af); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formula",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // sentence ::= formula 
            {
              Sentence RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Formula f = (Formula)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Sentence(fleft, f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentence start_val = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

