package pipe.gui.widgets;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.JPanel;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;

import pipe.dataLayer.DataLayer;
import pipe.dataLayer.MarkingParameter;
import pipe.dataLayer.Place;
import pipe.dataLayer.DataType;
import pipe.gui.GuiView;

public class PlaceTypePanel extends JPanel {
	   Place place;
	   DataType dataType;
	   DataLayer pnmlData;
	   GuiView view;
	   JRootPane rootPane;
	   boolean flag;
	   Vector<DataType> group;
	   Vector<DataType> dtPool;
	   DefaultListModel dml;
//	   boolean isModify = false;
	   
	   
	   /**
	    * Creates new form PlaceEditor
	    */
	   public PlaceTypePanel(JRootPane _rootPane, Place _place, Vector<DataType> _group,
	           DataLayer _pnmlData, GuiView _view) {

		  place = _place;
	      dataType = _place.getDataType();
	      pnmlData = _pnmlData;
	      view = _view;
	      group = _group;
	      dtPool = _pnmlData.dtPool;
	      
	      flag = false;
	     
	      rootPane = _rootPane;
	      dml = new DefaultListModel();
	      
	      initComponents();
//	      if(dataType != null)
//	    	  SetValue(dataType.getName());
//	      showdefine(dataType);
	      rootPane.setDefaultButton(okButton);
	   }
	   
	   private void showdefine(DataType dt)
	   {
		   if(dt == null)
			   return;
		   if(dt.getDef())
		   {
			   flag = true;
//			   isModify = true;
			   this.nameTextField.setText(dt.getName());
			   this.powcheckbox.setSelected(dt.getPow());
			   Vector<String> types = dt.getTypes();
				  String s;
				  if(dt.getPow())
					  s = "P(< ";
				  else s = "< ";
				  for(int j = 0; j < types.size(); j ++)
				  {
					  s += types.get(j);
					  if(j < types.size() - 1)
					  {
						  s += " ,";
					  }
				  }
				  if(dt.getPow())
					  s += " >)";
				  else s += " >";
			   this.TypeTextField.setText(s);
		   }
	   }
	   
	   
	   private void SetValue(String name)
	   {
		   for(int i = 0; i < dtPool.size(); i ++)
			  {
				  if(dtPool.get(i).getName().equals(name))
				  {
					  Vector<String> types = dtPool.get(i).getTypes();
					  String s;
					  if(dtPool.get(i).getPow())
						  s = "P(< ";
					  else s = "< ";
					  for(int j = 0; j < types.size(); j ++)
					  {
						  s += types.get(j);
						  if(j < types.size() - 1)
						  {
							  s += " ,";
						  }
					  }
					  if(dtPool.get(i).getPow())
						  s += " >)";
					  else s += " >";
					  showMessage(s);
					  nameTextField.setText(dtPool.get(i).getName());
					  if(dataType != null)
						  if(name.equals(dataType.getName()))
							  	isTypeCheckBox.setSelected(true);
					  powcheckbox.setSelected(dtPool.get(i).getPow());
					  this.isTypeCheckBox.setSelected(false);
					  if(dataType != null)
						  if(dataType.getName().equals(name.trim()))
							  this.isTypeCheckBox.setSelected(true);
					  showdefine(dtPool.get(i));
					  break;
				  }
			  }
	   }
//	   private void SetValue1(String name)
//	   {
//		   for(int i = 0; i < group.size(); i ++)
//			  {
//				  if(group.get(i).getName().equals(name))
//				  {
//					  Vector<String> types = group.get(i).getTypes();
//					  String s;
//					  if(group.get(i).getPow())
//						  s = "P(< ";
//					  else s = "< ";
//					  for(int j = 0; j < types.size(); j ++)
//					  {
//						  s += types.get(j);
//						  if(j < types.size() - 1)
//						  {
//							  s += " ,";
//						  }
//					  }
//					  if(group.get(i).getPow())
//						  s += " >)";
//					  else s += " >";
//					  showMessage(s);
//					  nameTextField.setText(group.get(i).getName());
//					  if(dataType != null)
//						  if(name.equals(dataType.getName()))
//							  	isTypeCheckBox.setSelected(true);
//					  powcheckbox.setSelected(group.get(i).getPow());
//					  this.isTypeCheckBox.setSelected(false);
//					  if(dataType != null)
//						  if(dataType.getName().equals(name.trim()))
//							  this.isTypeCheckBox.setSelected(true);
//					  showdefine(group.get(i));
//					  break;
//				  }
//			  }
//	   }
	   
	   /** This method is called from within the constructor to
	    * initialize the form.
	    * WARNING: Do NOT modify this code. The content of this method is
	    * always regenerated by the Form Editor.
	    */
	   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
	   private void initComponents() {
	      java.awt.GridBagConstraints gridBagConstraints;

	      placeTypePanel = new javax.swing.JPanel();
	      nameLabel = new javax.swing.JLabel();
	      dataTypePoolLabel = new javax.swing.JLabel();
	      nameTextField = new javax.swing.JTextField();
	      TypeTextField = new javax.swing.JTextArea();
	      
	      
	      buttonPanel = new javax.swing.JPanel();
	      buttonPanel1 = new javax.swing.JPanel();
	      removeButton = new javax.swing.JButton();
	      okButton = new javax.swing.JButton();
	      cancelButton = new javax.swing.JButton();
	      lBraketButton = new javax.swing.JButton();
		  rBraketButton = new javax.swing.JButton();
		  createButton = new javax.swing.JButton();
		  stringButton = new javax.swing.JButton();
		  intButton = new javax.swing.JButton();
		  
		  loadButton = new javax.swing.JButton();
		  
		  TextLabel = new javax.swing.JLabel();
		  
		  TypelistPanel = new javax.swing.JPanel();
		  
		  chooseType = new javax.swing.JButton();
		  
		  namePanel = new javax.swing.JPanel();
		  TypefieldPanel = new javax.swing.JPanel();
		  
		  isTypeCheckBox = new javax.swing.JCheckBox();
		  
		  
		  for(int i = 0; i < dtPool.size(); i++)
		  {
			  dml.addElement(dtPool.get(i).getName());
		  }
		  Typelist = new javax.swing.JList(dml);

		  powcheckbox = new javax.swing.JCheckBox();
	      setLayout(new java.awt.GridBagLayout());
	      
	      placeTypePanel.setLayout(new java.awt.GridBagLayout());

	      placeTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Token Type"));
	      namePanel.setLayout(new java.awt.FlowLayout());
	      nameLabel.setText("Name:");
	      namePanel.add(nameLabel);
//	      gridBagConstraints = new java.awt.GridBagConstraints();
//	      gridBagConstraints.gridx = 1;
//	      gridBagConstraints.gridy = 0;
//	      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
//	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
//	      placeTypePanel.add(nameLabel, gridBagConstraints);

	      if(dataType != null)
	    	  nameTextField.setText(dataType.getName());
	      nameTextField.setMaximumSize(new java.awt.Dimension(180, 20));
	      nameTextField.setMinimumSize(new java.awt.Dimension(180, 20));
	      nameTextField.setPreferredSize(new java.awt.Dimension(180, 20));
	      namePanel.add(nameTextField);
	      
	      
	      if(dataType != null)
	    	  this.isTypeCheckBox.setSelected(true);
	      isTypeCheckBox.setText("setPlaceType");
	      isTypeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
	      isTypeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
	      isTypeCheckBox.addActionListener(new java.awt.event.ActionListener() {
	    	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		        	 isTypecheckboxHandler(evt);
		        	}
	      });
	      
	      namePanel.add(isTypeCheckBox);
	      
	      gridBagConstraints = new java.awt.GridBagConstraints();
//	      gridBagConstraints.gridwidth = 2;
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 0;
	      gridBagConstraints.fill = java.awt.GridBagConstraints.WEST;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      placeTypePanel.add(namePanel, gridBagConstraints);
	      
	      buttonPanel1.setLayout(new java.awt.FlowLayout());

	      lBraketButton.setText("<");
	      lBraketButton.setMaximumSize(new java.awt.Dimension(50, 25));
	      lBraketButton.setMinimumSize(new java.awt.Dimension(50, 25));
	      lBraketButton.setPreferredSize(new java.awt.Dimension(50, 25));
	      lBraketButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	 lBraketButtonHandler(evt);
	         }
	      });

	      buttonPanel1.add(lBraketButton);

	      stringButton.setText("Str");
	      stringButton.setMaximumSize(new java.awt.Dimension(50, 25));
	      stringButton.setMinimumSize(new java.awt.Dimension(50, 25));
	      stringButton.setPreferredSize(new java.awt.Dimension(50, 25));
	      stringButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            stringButtonHandler(evt);
	         }

			
	      });

	      buttonPanel1.add(stringButton);
	      
	      intButton.setText("Int");
	      intButton.setMaximumSize(new java.awt.Dimension(50, 25));
	      intButton.setMinimumSize(new java.awt.Dimension(50, 25));
	      intButton.setPreferredSize(new java.awt.Dimension(50, 25));
	      intButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            intButtonHandler(evt);
	         }
	      });

	      buttonPanel1.add(intButton);
	      
	      rBraketButton.setText(">");
	      rBraketButton.setMaximumSize(new java.awt.Dimension(50, 25));
	      rBraketButton.setMinimumSize(new java.awt.Dimension(50, 25));
	      rBraketButton.setPreferredSize(new java.awt.Dimension(50, 25));
	      rBraketButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	 rBraketButtonHandler(evt);
	         }
			
	      });

	      buttonPanel1.add(rBraketButton);
	      
	      if(dataType != null)
	    	  powcheckbox.setSelected(dataType.getPow());
	      powcheckbox.setText("Is Power Set");
	      powcheckbox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
	      powcheckbox.setMargin(new java.awt.Insets(0, 0, 0, 0));
	      powcheckbox.addActionListener(new java.awt.event.ActionListener() {
	    	  public void actionPerformed(java.awt.event.ActionEvent evt) {
		        	 powcheckboxHandler(evt);
		        	}
	      });
	      
	      buttonPanel1.add(powcheckbox);
	      
	      

	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 1;
	      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
	      placeTypePanel.add(buttonPanel1, gridBagConstraints);
	      
	      
	      showMessage("(Type Description)");
	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 2;
	      gridBagConstraints.anchor= java.awt.GridBagConstraints.WEST;
	      gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 3);
	      placeTypePanel.add(TextLabel, gridBagConstraints);
	      
	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 2;
	      gridBagConstraints.anchor= java.awt.GridBagConstraints.EAST;
	      gridBagConstraints.insets = new java.awt.Insets(3, 10, 3, 3);
	      this.dataTypePoolLabel.setText("DataType Pool");
	      placeTypePanel.add(dataTypePoolLabel, gridBagConstraints);
	   
	    
	      TypelistPanel.setLayout(new java.awt.GridBagLayout());
	      
	      TypeTextField.setLineWrap(true);
	      TypeTextField.setRows(8);
	      TypeTextField.setEditable(false);
	      TypeTextField.setMaximumSize(new java.awt.Dimension(230, 150));
	      TypeTextField.setMinimumSize(new java.awt.Dimension(230, 150));
	      TypeTextField.setPreferredSize(new java.awt.Dimension(230, 150));
	      if(dataType != null){
	    	  this.SetValue(dataType.getName());
	      }
	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 0;
//	      gridBagConstraints.gridwidth = 2;
//	      gridBagConstraints.gridheight = 10;
	      gridBagConstraints.fill= java.awt.GridBagConstraints.HORIZONTAL;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      TypelistPanel.add(TypeTextField, gridBagConstraints);
	      
	     
	      TypefieldPanel.setLayout(new java.awt.GridBagLayout());
	      
	      Typelist.setBackground(Color.WHITE);
	      Typelist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION );
	      Typelist.setMaximumSize(new java.awt.Dimension(100, 134));
	      Typelist.setMinimumSize(new java.awt.Dimension(100, 134));
	      Typelist.setPreferredSize(new java.awt.Dimension(100, 134));
//	      Typelist.setSize(TypeTextField.getWidth() ,TypeTextField.getHeight());
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 0;
	      gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      TypefieldPanel.add(Typelist,gridBagConstraints);
	      
	      chooseType.setText("Select");
	      chooseType.setMaximumSize(new java.awt.Dimension(75, 25));
	      chooseType.setMinimumSize(new java.awt.Dimension(75, 25));
	      chooseType.setPreferredSize(new java.awt.Dimension(75, 25));
	      chooseType.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	 if(Typelist.isSelectionEmpty())
	        		 return;
	        	 String sele = Typelist.getSelectedValue().toString();
	        	 if(nameTextField.getText().trim().equals(sele.trim()))
	             {
	            	 showWarning("Can not include itself");
	            	 return;
	             }
	        	 
	             for(int i = 0; i < group.size(); i ++)
	             {
	            	 if(sele.trim().equals(group.get(i).getName().trim()))
	            	 {
	            		 if(group.get(i).getPow())
	            		 {
	            			 showWarning("Power Set can not be include");
	            			 return;
	            		 }
	            	 }
	             }
	             String str = TypeTextField.getText().trim();
	             if(str.contains("<")&& !str.endsWith(">") && !str.endsWith(")"))
				   {
					   if(str.endsWith("<"))
					   {
						   TypeTextField.append(sele);
					   }
					   else
					   {
						   TypeTextField.append(", " + sele);
					   }
				   }
	         }

	      });
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 1;
	      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      TypefieldPanel.add(chooseType,gridBagConstraints);
	      
	      gridBagConstraints.gridx = 1;
	      gridBagConstraints.gridy = 0;
	      gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      TypelistPanel.add(TypefieldPanel,gridBagConstraints);
	      
	      
	      gridBagConstraints.gridx = 0;
	      gridBagConstraints.gridy = 3;
	      gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
	      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
	      
	      placeTypePanel.add(TypelistPanel, gridBagConstraints);
	      
	      
	      
	      Typelist.addMouseListener(new java.awt.event.MouseAdapter()
	      {
	    	  public void mouseClicked(MouseEvent e)
	    	  {
	    		  if (e.getClickCount() == 2) {
	    	             String sele = Typelist.getSelectedValue().toString();
	    	             if(nameTextField.getText().trim().equals(sele.trim()))
	    	             {
	    	            	 showWarning("Can not include itself");
	    	            	 return;
	    	             }
	    	             for(int i = 0; i < group.size(); i ++)
	    	             {
	    	            	 if(sele.trim().equals(group.get(i).getName().trim()))
	    	            	 {
	    	            		 if(group.get(i).getPow())
	    	            		 {
	    	            			 showWarning("Power Set can not be include");
	    	            			 return;
	    	            		 }
	    	            	 }
	    	             }
	    	             String str = TypeTextField.getText().trim();
	    	             if(str.contains("<")&& !str.endsWith(">") && !str.endsWith(")"))
	    				   {
	    					   if(str.endsWith("<"))
	    					   {
	    						   TypeTextField.append(sele);
	    					   }
	    					   else
	    					   {
	    						   TypeTextField.append(", " + sele);
	    					   }
	    				   }
	    	          }
	    		  
	    		  
	    	  }
	      });
	      
	      
	      

	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridwidth = 2;
	      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
	      gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
	      add(placeTypePanel, gridBagConstraints);

	      buttonPanel.setLayout(new java.awt.FlowLayout());
	      
	      loadButton.setText("Load");
	      loadButton.setMaximumSize(new java.awt.Dimension(75, 25));
	      loadButton.setMinimumSize(new java.awt.Dimension(75, 25));
	      loadButton.setPreferredSize(new java.awt.Dimension(75, 25));
	      loadButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            loadButtonHandler(evt);
	         }

			

	      });
	      
	      buttonPanel.add(loadButton);
	      
	      removeButton.setText("Clear");
	      removeButton.setMaximumSize(new java.awt.Dimension(75, 25));
	      removeButton.setMinimumSize(new java.awt.Dimension(75, 25));
	      removeButton.setPreferredSize(new java.awt.Dimension(75, 25));
	      removeButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            removeButtonHandler(evt);
	         }

	      });
	      
	      buttonPanel.add(removeButton);

	      
	      okButton.setText("OK");
	      okButton.setMaximumSize(new java.awt.Dimension(75, 25));
	      okButton.setMinimumSize(new java.awt.Dimension(75, 25));
	      okButton.setPreferredSize(new java.awt.Dimension(75, 25));
	      okButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            okButtonHandler(evt);
	         }
	      });
	      

	    
	      buttonPanel.add(okButton);

	      cancelButton.setText("Cancel");
	      cancelButton.setMaximumSize(new java.awt.Dimension(75, 25));
	      cancelButton.setMinimumSize(new java.awt.Dimension(75, 25));
	      cancelButton.setPreferredSize(new java.awt.Dimension(75, 25));
	      cancelButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	            cancelButtonHandler(evt);
	         }
	      });

	      buttonPanel.add(cancelButton);
	      
	      createButton.setText("Create");
	      createButton.setMaximumSize(new java.awt.Dimension(75, 25));
	      createButton.setMinimumSize(new java.awt.Dimension(75, 25));
	      createButton.setPreferredSize(new java.awt.Dimension(75, 25));
	      createButton.addActionListener(new java.awt.event.ActionListener() {
	         public void actionPerformed(java.awt.event.ActionEvent evt) {
	        	 createButtonHandler(evt);
	         }
	      });
	      
	      buttonPanel.add(createButton);

	      gridBagConstraints = new java.awt.GridBagConstraints();
	      gridBagConstraints.gridx = 1;
	      gridBagConstraints.gridy = 1;
	      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
	      add(buttonPanel, gridBagConstraints);

	   }


	   
	   ChangeListener changeListener = new javax.swing.event.ChangeListener() {
	      public void stateChanged(javax.swing.event.ChangeEvent evt) {
	         JSpinner spinner = (JSpinner)evt.getSource();
	         JSpinner.NumberEditor numberEditor =
	                 ((JSpinner.NumberEditor)spinner.getEditor());
	         numberEditor.getTextField().setBackground(new Color(255,255,255));
	         spinner.removeChangeListener(this);
	      }
	   };   

	   
//	   private void markingComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markingComboBoxActionPerformed
//	      Integer index = markingComboBox.getSelectedIndex();
//
//	      if (index > 0){
//	         Integer value = ((MarkingParameter)markingComboBox.getItemAt(index)).getValue();
//	         markingSpinner.setValue(value);
//	      } 
//	   }//GEN-LAST:event_markingComboBoxActionPerformed

	   
	   private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
	      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
	        // doOK();
	      }
	   }//GEN-LAST:event_okButtonKeyPressed

	   private void showWarning(String message)
	   {
		   TextLabel.setForeground(Color.RED);
		   TextLabel.setText(message);
	   }
	   
	   private void showMessage(String message)
	   {
		   TextLabel.setForeground(Color.BLACK);
		   TextLabel.setText(message);
	   }
	   
	   private void doOK(){
	  
		   if(!flag)
		   {
			   showWarning("Illegal Definition");
			   return;
		   }
		   String str = TypeTextField.getText().trim();
		   if(str.equals("P( < > )") || str.equals("< >")||str.equals(""))
		   {
			   showWarning("Empty Type");
			   return;
		   }
		   if(nameTextField.getText().trim().equals(""))
		   {
			   showWarning("Name can not be empty");
			   return;
		   }
		   if(!buildType(str))
			   return;
	       exit();
	   }
	   
	   private boolean buildType(String str)
	   {
		   String str1;
		   DataType dt;
		   if(!powcheckbox.isSelected())
			   str1 = str.substring(1, str.length() - 1).trim();
		   else
		   {
			   str1 = str.substring(4, str.length() - 3).trim();
		   }
		   String[] str2;
		   str2 = str1.split(", ");
		   int index = -1;
		   for(int i = 0; i < dtPool.size(); i ++)
		   {
			   if(dtPool.get(i).getName().equals(nameTextField.getText().trim()))
			   {
				   
				   if(this.createButton.getText().equals("Create"))
				   {
					   showWarning("Name already contained");
				  
					   return false;
				   }
				   index = i;
			   }
		   }
		   
		   if(this.createButton.getText().equals("Create"))
		   {
			   dt = new DataType(nameTextField.getText().trim(), str2, powcheckbox.isSelected(),group);
//			   Vector<String> v = dt.getTypes();
//			   for(int i = 0; i < v.size(); i++)
//				   System.out.print(v.get(i) + " ");
			   group.add(dt);
			   dtPool.add(dt);
			   dml.addElement(dt.getName());
			   if(this.isTypeCheckBox.isSelected())
			   {
				   place.setDataType(dt);
				   this.dataType = dt;
			   }
			   this.nameTextField.setText("");
			   this.powcheckbox.setSelected(false);
			   this.isTypeCheckBox.setSelected(false);
			   this.TypeTextField.setText("");
			   
			   showMessage("Type Created");
		   }
		   else
		   {
			   if(index < 0)
			   {
				   showWarning("Element not in list");
				   return false;
				}
			   dt = dtPool.get(index);
//			   dt.setName(nameTextField.getText().trim());
//			   dt.setGroup(group);
			   dt.setPow(powcheckbox.isSelected());
//			   dt.defineType(str2);
			   if(this.isTypeCheckBox.isSelected())
			   {
				   place.setDataType(dt);
				   dataType = dt;
				}
			   
			   showMessage("Type Modified");
			}
		   //if(!isModify)
			
		   
		   return true;
	   }
	   
//	   private boolean buildType(String str)
//	   {
//		   String str1;
//		   DataType dt;
//		   if(!powcheckbox.isSelected())
//			   str1 = str.substring(1, str.length() - 1).trim();
//		   else
//		   {
//			   str1 = str.substring(4, str.length() - 3).trim();
//		   }
//		   String[] str2;
//		   str2 = str1.split(", ");
//		   int index = -1;
//		   for(int i = 0; i < group.size(); i ++)
//		   {
//			   if(group.get(i).getName().equals(nameTextField.getText().trim()))
//			   {
//				   
//				   if(this.createButton.getText().equals("Create"))
//				   {
//					   showWarning("Name already contained");
//				  
//					   return false;
//				   }
//				   index = i;
//			   }
//		   }
//		   if(this.createButton.getText().equals("Create"))
//		   {
//			   dt = new DataType(nameTextField.getText().trim(), str2, powcheckbox.isSelected(),group);
////			   Vector<String> v = dt.getTypes();
////			   for(int i = 0; i < v.size(); i++)
////				   System.out.print(v.get(i) + " ");
//			   group.add(dt);
//			   dtPool.add(dt);
//			   dml.addElement(dt.getName());
//			   if(this.isTypeCheckBox.isSelected())
//			   {
//				   place.setDataType(group.get(group.size() - 1));
//				   dataType = group.get(group.size() -1);
//			   }
//			   this.nameTextField.setText("");
//			   this.powcheckbox.setSelected(false);
//			   this.isTypeCheckBox.setSelected(false);
//			   this.TypeTextField.setText("");
//			   
//			   showMessage("Type Created");
//		   }
//		   else
//		   {
//			   if(index < 0)
//			   {
//				   showWarning("Element not in list");
//				   return false;
//				}
//			   dt = group.get(index);
//			   dt.setName(nameTextField.getText().trim());
//			   dt.setGroup(group);
//			   dt.setPow(powcheckbox.isSelected());
//			   dt.defineType(str2);
//			   if(this.isTypeCheckBox.isSelected())
//			   {
//				   place.setDataType(group.get(index));
//				   dataType = group.get(index);
//				}
//			   
//			   showMessage("Type Modified");
//			}
//		   //if(!isModify)
//			
//		   
//		   return true;
//	   }
	   private void loadButtonHandler(ActionEvent evt) {
		   if(loadButton.getText().equals("Load"))
		   {
			   	if(!this.Typelist.isSelectionEmpty())
			   	{
			 			SetValue(Typelist.getSelectedValue().toString());
			 			this.loadButton.setText("UnLoad");
			 			this.nameTextField.setEditable(false);
//			 			this.Typelist.setEnabled(false);
			 			this.createButton.setText("Modify");
			 			this.repaint();
			 			return;
			   	}
		   }
		   
		   if(loadButton.getText().equals("UnLoad"))
		   {
			   this.nameTextField.setText("");
			   this.nameTextField.setEditable(true);
			   this.isTypeCheckBox.setSelected(false);
//			   this.Typelist.setEnabled(true);
			   this.powcheckbox.setSelected(false);
			   this.TypeTextField.setText("");
			   showMessage("(Type Description)");
			   this.loadButton.setText("Load");
			   this.createButton.setText("Create");
			   this.repaint();
			   return;
		   }
			
		}
	   
	   private void createButtonHandler(ActionEvent evt) {
//		   
		   
		   if(!flag)
		   {
			   showWarning("Illegal Definition");
			   return;
		   }
		   String str = TypeTextField.getText().trim();
		   if(str.equals("P( < > )") || str.equals("< >")||str.equals(""))
		   {
			   showWarning("Empty Type");
			   return;
		   }
		   if(nameTextField.getText().trim().equals(""))
		   {
			   showWarning("Name can not be empty");
			   return;
		   }
		   if(!buildType(str))
			   return;
		   
		}
	   
	   
	   private void lBraketButtonHandler(ActionEvent evt) {
			doString(0);
			
		}
	   
	   private void stringButtonHandler(ActionEvent evt) {
		   doString(1);
		}
	   
	   private void intButtonHandler(ActionEvent evt) {
		   doString(2);
			
		}
	   
	   private void rBraketButtonHandler(ActionEvent evt) {
		   doString(3);
			
		}
	   
	   private void doString(int kind)
	   {
		   String str = TypeTextField.getText().trim();
		   
		   switch(kind)
		   {
		   case 0:
			   if(!str.contains("<")&&!str.contains("P"))
			   {
				   TypeTextField.setText("< " + str);
			   }
			   break;
		   case 1:
			   if(str.contains("<")&& !str.endsWith(">") && !str.endsWith(")"))
			   {
				   if(str.endsWith("<"))
				   {
					   TypeTextField.append("string");
				   }
				   else
				   {
					   TypeTextField.append(", string");
				   }
			   }
			   break;
		   case 2:
			   if(str.contains("<")&& !str.endsWith(">") && !str.endsWith(")"))
			   {
				   if(str.endsWith("<"))
				   {
					   TypeTextField.append("int");
				   }
				   else
				   {
					   TypeTextField.append(", int");
				   }
			   }
			   break;
		   case 3:
			   if(str.contains("<"))
			   {
				   if(!str.endsWith(">")&& !str.endsWith(")"))
				   {
					   TypeTextField.setText(str + " >");
					   flag = true;
				   }
			   }
			   break;
		   default:
			   break;
		   }
	   }
	   
	   private void isTypecheckboxHandler(ActionEvent evt)
	   {
		   
	   }
	   
	   
	   private void powcheckboxHandler(ActionEvent evt) {
			if(powcheckbox.isSelected())
			{
				String str = TypeTextField.getText().trim();
				if(str.startsWith("<")&&str.endsWith(">"))
				{
					TypeTextField.setText("P( " + str + " )");
				}
				else
				{
					powcheckbox.setSelected(false);
					powcheckbox.repaint();
				}
			}	
			else
			{
				String str = TypeTextField.getText().trim();
				if(str.startsWith("P(")&&str.endsWith(")"))
				{
					TypeTextField.setText(str.substring(2, str.length() - 2));
				}
			}
		}
	   
	   private void removeButtonHandler(ActionEvent evt) {
			TypeTextField.setText("");
			powcheckbox.setSelected(false);
			flag = false;
			repaint();
			
		}
	   
	   private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
	      doOK();
	   }//GEN-LAST:event_okButtonHandler

	   
	   private void exit() {
	      rootPane.getParent().setVisible(false);
	   }
	   
	   
	   private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
	      exit();
	   }//GEN-LAST:event_cancelButtonHandler

	   public DataType getDataType()
	   {
		   return dataType;
	   }

	   // Variables declaration - do not modify//GEN-BEGIN:variables

	   private javax.swing.JPanel buttonPanel;
	   private javax.swing.JPanel buttonPanel1;
	   private javax.swing.JButton removeButton;
	   private javax.swing.JButton cancelButton;
	   private javax.swing.JButton lBraketButton;
	   private javax.swing.JButton rBraketButton;
	   private javax.swing.JButton stringButton;
	   private javax.swing.JButton intButton;
	   private javax.swing.JCheckBox powcheckbox;
	   private javax.swing.JLabel nameLabel;
	   private javax.swing.JTextField nameTextField;
	   private javax.swing.JTextArea  TypeTextField;
	   private javax.swing.JButton okButton;
	   private javax.swing.JPanel placeTypePanel;
	   private javax.swing.JList Typelist;
	   private javax.swing.JLabel TextLabel;
	   private javax.swing.JLabel dataTypePoolLabel;
	   private javax.swing.JPanel TypelistPanel;
	   private javax.swing.JButton chooseType;
	   private javax.swing.JPanel namePanel;
	   private javax.swing.JPanel TypefieldPanel;
	   private javax.swing.JCheckBox isTypeCheckBox;
	   private javax.swing.JButton createButton;
	   private javax.swing.JButton loadButton;
	   // End of variables declaration//GEN-END:variables
}
