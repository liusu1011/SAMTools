package pipe.gui.widgets;

import java.awt.Color;
import java.awt.event.FocusEvent;
import java.util.Collections;
import java.util.Vector;

import javax.swing.DefaultListModel;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeListener;

import pipe.dataLayer.BasicType;
import pipe.dataLayer.DataLayer;
import pipe.dataLayer.DataType;
import pipe.dataLayer.MarkingParameter;
import pipe.dataLayer.Place;
import pipe.gui.GuiView;

/**
 *
 * @author  pere
 */
public class PlaceEditorPanel 
        extends javax.swing.JPanel {
   
   Place place;
   Boolean attributesVisible;
   String name;
   int capacity;
   DataLayer pnmlData;
   GuiView view;
   JRootPane rootPane;
   DefaultListModel dml;
   
   
   /**
    * Creates new form PlaceEditor
    */
   public PlaceEditorPanel(JRootPane _rootPane, Place _place, 
           DataLayer _pnmlData, GuiView _view) {
      place = _place;
      pnmlData = _pnmlData;
      view = _view;
      attributesVisible = place.getAttributesVisible();

      name = place.getName();      
      capacity = place.getCapacity();

      rootPane = _rootPane;
      
      initComponents();
      rootPane.setDefaultButton(AddButton);  
      
      
   }
   
   private String inittext(boolean flag)
   {
	   String result = "";
	   if(place.getDataType() != null)
	   {
		   DataType d = place.getDataType();
		   if(d.getDef())
		   {
	    		  Vector<String> types = d.getTypes();
				  String s = "";
				  for(int j = 0; j < types.size(); j ++)
				  {
					  s += types.get(j);
					  if(j < types.size() - 1)
					  {
						  s += " ,";
					  }
				  }
				  result = "Input Format:\n[" + s + "]";
	    	}
		   
	   }
	   if(flag)
	   {
		   this.newtoken.setForeground(Color.gray);
		   newtoken.setText(result);//to be modified;
	   }
	   return result;
   }
   
   
   private void inittype()
   {
	   String type = "T:";
	   if(place.getDataType() != null)
	   {
		   DataType d = place.getDataType();
		   if(d.getDef())
		   {
			   Vector<String> types = d.getTypes();
				  if(d.getPow())
					  type += "P(< ";
				  else type += "< ";
				  for(int j = 0; j < types.size(); j ++)
				  {
					  type += types.get(j);
					  if(j < types.size() - 1)
					  {
						  type += " ,";
					  }
				  }
				  if(d.getPow())
					  type += " >)";
				  else type += " >";
	    	}
	   }
	   dml.addElement(type);
	   
   }
   
   private void initToken()
   {
	   if(place.getDataType() != null && place.getToken() != null)
	   {
		   for(int i = 0; i < place.getToken().getTokenCount(); i++)
		   {
			   String temp = place.getToken().getTokenbyIndex(i).displayToken();
			   dml.addElement(temp);
		   }
	   }
   }
   
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {
      java.awt.GridBagConstraints gridBagConstraints;

      
      dml = new DefaultListModel();
      placeEditorPanel = new javax.swing.JPanel();
      nameLabel = new javax.swing.JLabel();
      nameTextField = new javax.swing.JTextField();
      capacityLabel = new javax.swing.JLabel();
      capacityTextField = new javax.swing.JTextField();
      tokenLabel = new javax.swing.JLabel();
      tokenlistLabel = new javax.swing.JLabel();
      newtoken = new javax.swing.JTextArea();
      
      
      newtokenlist = new javax.swing.JList(dml);
      markingLabel = new javax.swing.JLabel();
      markingSpinner = new javax.swing.JSpinner();
      markingSpinner.setModel(new SpinnerNumberModel(place.getCurrentMarking(),0,Integer.MAX_VALUE,1));

      attributesCheckBox = new javax.swing.JCheckBox();
      buttonPanel = new javax.swing.JPanel();
      AddButton = new javax.swing.JButton();
      DelButton = new javax.swing.JButton();
      
      okButton = new javax.swing.JButton();
      cancelButton = new javax.swing.JButton();

      setLayout(new java.awt.GridBagLayout());

      placeEditorPanel.setLayout(new java.awt.GridBagLayout());

      placeEditorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Place Editor"));
      nameLabel.setText("Name:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameLabel, gridBagConstraints);

      nameTextField.setText(place.getName());
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(nameTextField, gridBagConstraints);
      
      capacityLabel.setText("Capacity");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(capacityLabel, gridBagConstraints);
      
      capacityTextField.setText(Integer.toString(place.getCapacity()));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 1;
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(capacityTextField, gridBagConstraints);

      markingLabel.setText("Marking:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(markingLabel, gridBagConstraints);

      tokenLabel.setText("[Add New Token]");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(tokenLabel, gridBagConstraints);
      
      
      tokenlistLabel.setText("[Token List]");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(tokenlistLabel, gridBagConstraints);
      
      newtoken.setPreferredSize(new java.awt.Dimension(150,50));
      newtoken.setAutoscrolls(true);
      newtoken.setRows(7);
      newtoken.setLineWrap(true);
 
      inittext(true);
      newtoken.addFocusListener(new java.awt.event.FocusListener(){
    	  public void focusGained(FocusEvent e) {
    		  		if(newtoken.getText().trim().equals(inittext(false)))
    		  			newtoken.setText("");
    		  		newtoken.setForeground(Color.black);
    	      }

    	      public void focusLost(FocusEvent e) {
    	    	  	if(newtoken.getText().trim().equals(""))
    	    	  		inittext(true);
    	      }
      });
      
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(newtoken, gridBagConstraints);

//      newtokenlist.setPreferredSize(new java.awt.Dimension(150,104));
      newtokenlist.setBackground(Color.WHITE);
      newtokenlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION );
      inittype();
      initToken();
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      JScrollPane scrollNewTokenListPane = new JScrollPane();
      scrollNewTokenListPane.getViewport().add(newtokenlist);
      placeEditorPanel.add(scrollNewTokenListPane, gridBagConstraints);
      

      attributesCheckBox.setSelected(place.getAttributesVisible());
      attributesCheckBox.setText("Show place attributes");
      attributesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
      attributesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
      placeEditorPanel.add(attributesCheckBox, gridBagConstraints);


      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 8, 5, 8);
      add(placeEditorPanel, gridBagConstraints);

      buttonPanel.setLayout(new java.awt.FlowLayout());

      AddButton.setText("Add");
      AddButton.setMaximumSize(new java.awt.Dimension(75, 25));
      AddButton.setMinimumSize(new java.awt.Dimension(75, 25));
      AddButton.setPreferredSize(new java.awt.Dimension(75, 25));
      AddButton.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
             AddButtonHandler(evt);
          }
       });

      buttonPanel.add(AddButton, gridBagConstraints);
      
      DelButton.setText("Delete");
      DelButton.setMaximumSize(new java.awt.Dimension(75, 25));
      DelButton.setMinimumSize(new java.awt.Dimension(75, 25));
      DelButton.setPreferredSize(new java.awt.Dimension(75, 25));
      DelButton.addActionListener(new java.awt.event.ActionListener() {
          public void actionPerformed(java.awt.event.ActionEvent evt) {
             DelButtonHandler(evt);
          }
       });
      buttonPanel.add(DelButton, gridBagConstraints);
      
      
      okButton.setText("OK");
      okButton.setMaximumSize(new java.awt.Dimension(75, 25));
      okButton.setMinimumSize(new java.awt.Dimension(75, 25));
      okButton.setPreferredSize(new java.awt.Dimension(75, 25));
      okButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonHandler(evt);
         }
      });
      okButton.addKeyListener(new java.awt.event.KeyAdapter() {
         public void keyPressed(java.awt.event.KeyEvent evt) {
            okButtonKeyPressed(evt);
         }
      });


      buttonPanel.add(okButton, gridBagConstraints);

      cancelButton.setText("Cancel");
      cancelButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonHandler(evt);
         }
      });


      buttonPanel.add(cancelButton, gridBagConstraints);

      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      add(buttonPanel, gridBagConstraints);

   }// </editor-fold>//GEN-END:initComponents

   
   ChangeListener changeListener = new javax.swing.event.ChangeListener() {
      public void stateChanged(javax.swing.event.ChangeEvent evt) {
         JSpinner spinner = (JSpinner)evt.getSource();
         JSpinner.NumberEditor numberEditor =
                 ((JSpinner.NumberEditor)spinner.getEditor());
         numberEditor.getTextField().setBackground(new Color(255,255,255));
         spinner.removeChangeListener(this);
      }
   };   

  
   
   private void okButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_okButtonKeyPressed
      if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
         doOK();
      }
   }//GEN-LAST:event_okButtonKeyPressed

   /**
    * for large scale tokens input
    */
   private void doadd1()
   {
	   for(int k=0;k<20;k++){
		   newtoken.setText("["+k+"]");
//		   newtoken.setText("["+k+","+k+"]");
		   doadd();
	   }
	   
   }
   
   private void doadd()
   {
	  String[] tokens = newtoken.getText().trim().split("]");
	  DataType dt = place.getDataType();
	  for(int i = 0; i < tokens.length; i++)
	  {
		  String temptoken = tokens[i].substring(1);
		  String[] ele = temptoken.split(",");
		  
		  BasicType[] bt = new BasicType[ele.length];
		  for(int j = 0; j < ele.length; j++)
		  {
			  bt[j] = new BasicType();
			  if(dt.getTypebyIndex(j) == 0)
			  {
				  bt[j].kind = 0;
				  try{
					  bt[j].Tint = Integer.parseInt(ele[j].trim());
			      }
				  catch(Exception e)
				  {
					 //show message
				  }
			  }
			  if(dt.getTypebyIndex(j) == 1)
			  {
				  bt[j].kind = 1;
				  try{
					  bt[j].Tstring = ele[j].trim();
			      }
				  catch(Exception e)
				  {
					  //show message
				  }
			  }
		  }
		  if(!place.addToken(bt))
		  {
			  //show message
		  }
		  
	  }
   }
   
   private void doDel(){
	   int index = newtokenlist.getSelectedIndex();
	   dml.remove(index);
	   place.token.listToken.remove(index-1);
   }
   
   private void doOK(){

//	   doadd();
      view.getUndoManager().newEdit(); // new "transaction""
      
      String newName = nameTextField.getText();
      if (!newName.equals(name)){
         view.getUndoManager().addEdit(place.setPNObjectName(newName));
      }
  
      String newCapacity = capacityTextField.getText();
      if(Integer.parseInt(newCapacity) != capacity){
    	  view.getUndoManager().addEdit(place.setCapacity(Integer.parseInt(newCapacity)));
      }
      
      if (attributesVisible != attributesCheckBox.isSelected()){
         place.toggleAttributesVisible();
      }    
      
      place.repaint();
      exit();
   }
   
   private void AddButtonHandler(java.awt.event.ActionEvent evt){
	   doadd();
	   dml.clear();
	   inittype();
	   initToken();
	   inittext(true);
   }
   
   private void DelButtonHandler(java.awt.event.ActionEvent evt){
	   doDel();
   }
   
   private void okButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonHandler
      doOK();
   }//GEN-LAST:event_okButtonHandler

   
   private void exit() {
      rootPane.getParent().setVisible(false);
   }
   
   
   private void cancelButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonHandler
      exit();
   }//GEN-LAST:event_cancelButtonHandler

   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JCheckBox attributesCheckBox;
   private javax.swing.JPanel buttonPanel;
   private javax.swing.JButton cancelButton;
   private javax.swing.JLabel markingLabel;
   private javax.swing.JLabel tokenLabel;
   private javax.swing.JLabel tokenlistLabel;
   private javax.swing.JSpinner markingSpinner;
   private javax.swing.JLabel nameLabel;
   private javax.swing.JTextField nameTextField;
   private javax.swing.JTextArea newtoken;
   private javax.swing.JList newtokenlist;
   private javax.swing.JButton okButton;
   private javax.swing.JButton AddButton;
   private javax.swing.JButton DelButton;
   private javax.swing.JPanel placeEditorPanel;
   private javax.swing.JLabel capacityLabel;
   private javax.swing.JTextField capacityTextField;
   // End of variables declaration//GEN-END:variables

}
